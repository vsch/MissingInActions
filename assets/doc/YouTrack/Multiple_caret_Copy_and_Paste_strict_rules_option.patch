Index: platform/editor-ui-api/src/com/intellij/openapi/ide/CopyPasteManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- platform/editor-ui-api/src/com/intellij/openapi/ide/CopyPasteManager.java	(revision 5f060fdec5c6f8e6118b851915c0be793035e96a)
+++ platform/editor-ui-api/src/com/intellij/openapi/ide/CopyPasteManager.java	(revision )
@@ -17,6 +17,8 @@
 
 import com.intellij.openapi.Disposable;
 import com.intellij.openapi.components.ServiceManager;
+import com.intellij.openapi.util.registry.Registry;
+import com.intellij.openapi.util.registry.RegistryValue;
 import com.intellij.ui.Gray;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -28,6 +30,8 @@
 
 public abstract class CopyPasteManager {
   public static final Color CUT_COLOR = Gray._160;
+  public static final RegistryValue
+    APPLY_STRICT_MULTI_CARET_STATE_CLIPBOARD_RULES = Registry.get("editor.strict.multi.caret.state.clipboard.rules");
 
   public static CopyPasteManager getInstance() {
     return ServiceManager.getService(CopyPasteManager.class);
@@ -68,4 +72,4 @@
   public interface ContentChangedListener extends EventListener {
     void contentChanged(@Nullable final Transferable oldTransferable, final Transferable newTransferable);
   }
-}
\ No newline at end of file
+}
Index: platform/platform-impl/src/com/intellij/ide/CopyPasteManagerEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- platform/platform-impl/src/com/intellij/ide/CopyPasteManagerEx.java	(revision 5f060fdec5c6f8e6118b851915c0be793035e96a)
+++ platform/platform-impl/src/com/intellij/ide/CopyPasteManagerEx.java	(revision )
@@ -17,6 +17,7 @@
 
 import com.intellij.ide.ui.UISettings;
 import com.intellij.openapi.Disposable;
+import com.intellij.openapi.editor.CaretStateTransferableData;
 import com.intellij.openapi.editor.Document;
 import com.intellij.openapi.extensions.Extensions;
 import com.intellij.openapi.ide.CopyPasteManager;
@@ -30,6 +31,7 @@
 import java.awt.datatransfer.*;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 public class CopyPasteManagerEx extends CopyPasteManager implements ClipboardOwner {
@@ -74,7 +76,7 @@
 
   @Override
   public boolean areDataFlavorsAvailable(@NotNull DataFlavor... flavors) {
-    return flavors.length > 0 &&  myClipboardSynchronizer.areDataFlavorsAvailable(flavors);
+    return flavors.length > 0 && myClipboardSynchronizer.areDataFlavorsAvailable(flavors);
   }
 
   @Override
@@ -142,26 +144,55 @@
         }
       }
 
+      boolean applyStrictRules = APPLY_STRICT_MULTI_CARET_STATE_CLIPBOARD_RULES.asBoolean();
+      CaretStateTransferableData newState = null;
+      if (applyStrictRules && content.isDataFlavorSupported(CaretStateTransferableData.FLAVOR)) {
+        newState = (CaretStateTransferableData)content.getTransferData(CaretStateTransferableData.FLAVOR);
+      }
+
       Transferable same = null;
+      Transferable replace = null;
       for (Transferable old : myData) {
         if (clipString.equals(getStringContent(old))) {
-          same = old;
-          break;
+          if (!applyStrictRules) {
+            // should at least leave new content on top of stack and remove old instead of just moving old which may give surprising
+            // results on paste
+            replace = old;
+            break;
+          }
+          // need to check deeper, multiple caret data may be different and that makes these not equivalent when pasting
+          boolean flavorSupported = old.isDataFlavorSupported(CaretStateTransferableData.FLAVOR);
+          if (flavorSupported) {
+            CaretStateTransferableData oldState = (CaretStateTransferableData)old.getTransferData(CaretStateTransferableData.FLAVOR);
+            if (newState == null && oldState.startOffsets.length == 1 || newState != null && caretStateEquals(newState, oldState)) {
+              same = old;
+              break;
+            }
+          }
         }
       }
 
       if (same == null) {
+        if (replace != null) {
+          removeContent(replace);
+        }
         addToTheTopOfTheStack(content);
       }
       else {
         moveContentToStackTop(same, false); // notification is done in setContents() method
       }
     }
-    catch (UnsupportedFlavorException ignore) { }
-    catch (IOException ignore) { }
+    catch (UnsupportedFlavorException ignore) {
+    }
+    catch (IOException ignore) {
+    }
     return content;
   }
 
+  private boolean caretStateEquals(@NotNull CaretStateTransferableData state1, @NotNull CaretStateTransferableData state2) {
+    return Arrays.equals(state1.startOffsets, state2.startOffsets) && Arrays.equals(state1.endOffsets, state2.endOffsets);
+  }
+
   private void addToTheTopOfTheStack(@NotNull Transferable content) {
     myData.add(0, content);
     deleteAfterAllowedMaximum();
@@ -221,8 +252,10 @@
     try {
       return (String)content.getTransferData(DataFlavor.stringFlavor);
     }
-    catch (UnsupportedFlavorException ignore) { }
-    catch (IOException ignore) { }
+    catch (UnsupportedFlavorException ignore) {
+    }
+    catch (IOException ignore) {
+    }
     return null;
   }
 
@@ -249,8 +282,10 @@
           return data;
         }
       }
-      catch (UnsupportedFlavorException ignore) { }
-      catch (IOException ignore) { }
+      catch (UnsupportedFlavorException ignore) {
+      }
+      catch (IOException ignore) {
+      }
     }
 
     return null;
Index: platform/platform-impl/src/com/intellij/openapi/editor/ClipboardTextPerCaretSplitter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- platform/platform-impl/src/com/intellij/openapi/editor/ClipboardTextPerCaretSplitter.java	(revision 5f060fdec5c6f8e6118b851915c0be793035e96a)
+++ platform/platform-impl/src/com/intellij/openapi/editor/ClipboardTextPerCaretSplitter.java	(revision )
@@ -15,6 +15,7 @@
  */
 package com.intellij.openapi.editor;
 
+import com.intellij.openapi.ide.CopyPasteManager;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -33,14 +34,15 @@
     }
     List<String> result = new ArrayList<>(caretCount);
     int sourceCaretCount = caretData == null ? -1 : caretData.startOffsets.length;
-    String[] lines = sourceCaretCount == 1 || sourceCaretCount == caretCount ? null : input.split("\n", -1);
+    boolean applyStrictRules = CopyPasteManager.APPLY_STRICT_MULTI_CARET_STATE_CLIPBOARD_RULES.asBoolean();
+    String[] lines = sourceCaretCount == 1 || sourceCaretCount == caretCount || applyStrictRules  ? null : input.split("\n", -1);
     for (int i = 0; i < caretCount; i++) {
       if (sourceCaretCount == 1) {
         result.add(input);
       }
-      else if (sourceCaretCount == caretCount) {
+      else if (sourceCaretCount == caretCount || applyStrictRules ) {
         //noinspection ConstantConditions
-        result.add(new String(input.substring(caretData.startOffsets[i], caretData.endOffsets[i])));
+        result.add(i >= caretData.startOffsets.length ? "" : new String(input.substring(caretData.startOffsets[i], caretData.endOffsets[i])));
       }
       else if (lines.length == 0) {
         result.add("");
Index: platform/util/resources/misc/registry.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- platform/util/resources/misc/registry.properties	(revision 5f060fdec5c6f8e6118b851915c0be793035e96a)
+++ platform/util/resources/misc/registry.properties	(revision )
@@ -162,6 +162,8 @@
 editor.skip.copy.and.cut.for.empty.selection=false
 editor.distraction.free.mode=false
 
+editor.strict.multi.caret.state.clipboard.rules=false
+
 editor.durable.folding.state=true
 editor.durable.folding.state.description=If set, collapsed fold regions will preserve their state after a wider variety of document editing changes
 
